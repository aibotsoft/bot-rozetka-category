/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// InlineResponse200DataCurrent struct for InlineResponse200DataCurrent
type InlineResponse200DataCurrent struct {
	AllowIndexThreeParameters *bool       `json:"allow_index_three_parameters,omitempty"`
	Count                     *int64      `json:"count,omitempty"`
	Href                      *string     `json:"href,omitempty"`
	Id                        *int64      `json:"id,omitempty"`
	IsRozetkaTop              *bool       `json:"is_rozetka_top,omitempty"`
	LeftKey                   *int64      `json:"left_key,omitempty"`
	Level                     *int64      `json:"level,omitempty"`
	Mpath                     *string     `json:"mpath,omitempty"`
	Name                      *string     `json:"name,omitempty"`
	ParentId                  *int64      `json:"parent_id,omitempty"`
	RightKey                  *int64      `json:"right_key,omitempty"`
	RootId                    *int64      `json:"root_id,omitempty"`
	RzMpath                   *string     `json:"rz_mpath,omitempty"`
	Status                    *string     `json:"status,omitempty"`
	Subdomain                 interface{} `json:"subdomain,omitempty"`
	Title                     *string     `json:"title,omitempty"`
	TitlesMode                *string     `json:"titles_mode,omitempty"`
}

// NewInlineResponse200DataCurrent instantiates a new InlineResponse200DataCurrent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200DataCurrent() *InlineResponse200DataCurrent {
	this := InlineResponse200DataCurrent{}
	return &this
}

// NewInlineResponse200DataCurrentWithDefaults instantiates a new InlineResponse200DataCurrent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200DataCurrentWithDefaults() *InlineResponse200DataCurrent {
	this := InlineResponse200DataCurrent{}
	return &this
}

// GetAllowIndexThreeParameters returns the AllowIndexThreeParameters field value if set, zero value otherwise.
func (o *InlineResponse200DataCurrent) GetAllowIndexThreeParameters() bool {
	if o == nil || o.AllowIndexThreeParameters == nil {
		var ret bool
		return ret
	}
	return *o.AllowIndexThreeParameters
}

// GetAllowIndexThreeParametersOk returns a tuple with the AllowIndexThreeParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200DataCurrent) GetAllowIndexThreeParametersOk() (*bool, bool) {
	if o == nil || o.AllowIndexThreeParameters == nil {
		return nil, false
	}
	return o.AllowIndexThreeParameters, true
}

// HasAllowIndexThreeParameters returns a boolean if a field has been set.
func (o *InlineResponse200DataCurrent) HasAllowIndexThreeParameters() bool {
	if o != nil && o.AllowIndexThreeParameters != nil {
		return true
	}

	return false
}

// SetAllowIndexThreeParameters gets a reference to the given bool and assigns it to the AllowIndexThreeParameters field.
func (o *InlineResponse200DataCurrent) SetAllowIndexThreeParameters(v bool) {
	o.AllowIndexThreeParameters = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *InlineResponse200DataCurrent) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200DataCurrent) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *InlineResponse200DataCurrent) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *InlineResponse200DataCurrent) SetCount(v int64) {
	o.Count = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *InlineResponse200DataCurrent) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200DataCurrent) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *InlineResponse200DataCurrent) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *InlineResponse200DataCurrent) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InlineResponse200DataCurrent) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200DataCurrent) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InlineResponse200DataCurrent) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *InlineResponse200DataCurrent) SetId(v int64) {
	o.Id = &v
}

// GetIsRozetkaTop returns the IsRozetkaTop field value if set, zero value otherwise.
func (o *InlineResponse200DataCurrent) GetIsRozetkaTop() bool {
	if o == nil || o.IsRozetkaTop == nil {
		var ret bool
		return ret
	}
	return *o.IsRozetkaTop
}

// GetIsRozetkaTopOk returns a tuple with the IsRozetkaTop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200DataCurrent) GetIsRozetkaTopOk() (*bool, bool) {
	if o == nil || o.IsRozetkaTop == nil {
		return nil, false
	}
	return o.IsRozetkaTop, true
}

// HasIsRozetkaTop returns a boolean if a field has been set.
func (o *InlineResponse200DataCurrent) HasIsRozetkaTop() bool {
	if o != nil && o.IsRozetkaTop != nil {
		return true
	}

	return false
}

// SetIsRozetkaTop gets a reference to the given bool and assigns it to the IsRozetkaTop field.
func (o *InlineResponse200DataCurrent) SetIsRozetkaTop(v bool) {
	o.IsRozetkaTop = &v
}

// GetLeftKey returns the LeftKey field value if set, zero value otherwise.
func (o *InlineResponse200DataCurrent) GetLeftKey() int64 {
	if o == nil || o.LeftKey == nil {
		var ret int64
		return ret
	}
	return *o.LeftKey
}

// GetLeftKeyOk returns a tuple with the LeftKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200DataCurrent) GetLeftKeyOk() (*int64, bool) {
	if o == nil || o.LeftKey == nil {
		return nil, false
	}
	return o.LeftKey, true
}

// HasLeftKey returns a boolean if a field has been set.
func (o *InlineResponse200DataCurrent) HasLeftKey() bool {
	if o != nil && o.LeftKey != nil {
		return true
	}

	return false
}

// SetLeftKey gets a reference to the given int64 and assigns it to the LeftKey field.
func (o *InlineResponse200DataCurrent) SetLeftKey(v int64) {
	o.LeftKey = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *InlineResponse200DataCurrent) GetLevel() int64 {
	if o == nil || o.Level == nil {
		var ret int64
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200DataCurrent) GetLevelOk() (*int64, bool) {
	if o == nil || o.Level == nil {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *InlineResponse200DataCurrent) HasLevel() bool {
	if o != nil && o.Level != nil {
		return true
	}

	return false
}

// SetLevel gets a reference to the given int64 and assigns it to the Level field.
func (o *InlineResponse200DataCurrent) SetLevel(v int64) {
	o.Level = &v
}

// GetMpath returns the Mpath field value if set, zero value otherwise.
func (o *InlineResponse200DataCurrent) GetMpath() string {
	if o == nil || o.Mpath == nil {
		var ret string
		return ret
	}
	return *o.Mpath
}

// GetMpathOk returns a tuple with the Mpath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200DataCurrent) GetMpathOk() (*string, bool) {
	if o == nil || o.Mpath == nil {
		return nil, false
	}
	return o.Mpath, true
}

// HasMpath returns a boolean if a field has been set.
func (o *InlineResponse200DataCurrent) HasMpath() bool {
	if o != nil && o.Mpath != nil {
		return true
	}

	return false
}

// SetMpath gets a reference to the given string and assigns it to the Mpath field.
func (o *InlineResponse200DataCurrent) SetMpath(v string) {
	o.Mpath = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InlineResponse200DataCurrent) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200DataCurrent) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InlineResponse200DataCurrent) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InlineResponse200DataCurrent) SetName(v string) {
	o.Name = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *InlineResponse200DataCurrent) GetParentId() int64 {
	if o == nil || o.ParentId == nil {
		var ret int64
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200DataCurrent) GetParentIdOk() (*int64, bool) {
	if o == nil || o.ParentId == nil {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *InlineResponse200DataCurrent) HasParentId() bool {
	if o != nil && o.ParentId != nil {
		return true
	}

	return false
}

// SetParentId gets a reference to the given int64 and assigns it to the ParentId field.
func (o *InlineResponse200DataCurrent) SetParentId(v int64) {
	o.ParentId = &v
}

// GetRightKey returns the RightKey field value if set, zero value otherwise.
func (o *InlineResponse200DataCurrent) GetRightKey() int64 {
	if o == nil || o.RightKey == nil {
		var ret int64
		return ret
	}
	return *o.RightKey
}

// GetRightKeyOk returns a tuple with the RightKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200DataCurrent) GetRightKeyOk() (*int64, bool) {
	if o == nil || o.RightKey == nil {
		return nil, false
	}
	return o.RightKey, true
}

// HasRightKey returns a boolean if a field has been set.
func (o *InlineResponse200DataCurrent) HasRightKey() bool {
	if o != nil && o.RightKey != nil {
		return true
	}

	return false
}

// SetRightKey gets a reference to the given int64 and assigns it to the RightKey field.
func (o *InlineResponse200DataCurrent) SetRightKey(v int64) {
	o.RightKey = &v
}

// GetRootId returns the RootId field value if set, zero value otherwise.
func (o *InlineResponse200DataCurrent) GetRootId() int64 {
	if o == nil || o.RootId == nil {
		var ret int64
		return ret
	}
	return *o.RootId
}

// GetRootIdOk returns a tuple with the RootId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200DataCurrent) GetRootIdOk() (*int64, bool) {
	if o == nil || o.RootId == nil {
		return nil, false
	}
	return o.RootId, true
}

// HasRootId returns a boolean if a field has been set.
func (o *InlineResponse200DataCurrent) HasRootId() bool {
	if o != nil && o.RootId != nil {
		return true
	}

	return false
}

// SetRootId gets a reference to the given int64 and assigns it to the RootId field.
func (o *InlineResponse200DataCurrent) SetRootId(v int64) {
	o.RootId = &v
}

// GetRzMpath returns the RzMpath field value if set, zero value otherwise.
func (o *InlineResponse200DataCurrent) GetRzMpath() string {
	if o == nil || o.RzMpath == nil {
		var ret string
		return ret
	}
	return *o.RzMpath
}

// GetRzMpathOk returns a tuple with the RzMpath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200DataCurrent) GetRzMpathOk() (*string, bool) {
	if o == nil || o.RzMpath == nil {
		return nil, false
	}
	return o.RzMpath, true
}

// HasRzMpath returns a boolean if a field has been set.
func (o *InlineResponse200DataCurrent) HasRzMpath() bool {
	if o != nil && o.RzMpath != nil {
		return true
	}

	return false
}

// SetRzMpath gets a reference to the given string and assigns it to the RzMpath field.
func (o *InlineResponse200DataCurrent) SetRzMpath(v string) {
	o.RzMpath = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *InlineResponse200DataCurrent) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200DataCurrent) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *InlineResponse200DataCurrent) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *InlineResponse200DataCurrent) SetStatus(v string) {
	o.Status = &v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineResponse200DataCurrent) GetSubdomain() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineResponse200DataCurrent) GetSubdomainOk() (*interface{}, bool) {
	if o == nil || o.Subdomain == nil {
		return nil, false
	}
	return &o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *InlineResponse200DataCurrent) HasSubdomain() bool {
	if o != nil && o.Subdomain != nil {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given interface{} and assigns it to the Subdomain field.
func (o *InlineResponse200DataCurrent) SetSubdomain(v interface{}) {
	o.Subdomain = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *InlineResponse200DataCurrent) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200DataCurrent) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *InlineResponse200DataCurrent) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *InlineResponse200DataCurrent) SetTitle(v string) {
	o.Title = &v
}

// GetTitlesMode returns the TitlesMode field value if set, zero value otherwise.
func (o *InlineResponse200DataCurrent) GetTitlesMode() string {
	if o == nil || o.TitlesMode == nil {
		var ret string
		return ret
	}
	return *o.TitlesMode
}

// GetTitlesModeOk returns a tuple with the TitlesMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200DataCurrent) GetTitlesModeOk() (*string, bool) {
	if o == nil || o.TitlesMode == nil {
		return nil, false
	}
	return o.TitlesMode, true
}

// HasTitlesMode returns a boolean if a field has been set.
func (o *InlineResponse200DataCurrent) HasTitlesMode() bool {
	if o != nil && o.TitlesMode != nil {
		return true
	}

	return false
}

// SetTitlesMode gets a reference to the given string and assigns it to the TitlesMode field.
func (o *InlineResponse200DataCurrent) SetTitlesMode(v string) {
	o.TitlesMode = &v
}

func (o InlineResponse200DataCurrent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowIndexThreeParameters != nil {
		toSerialize["allow_index_three_parameters"] = o.AllowIndexThreeParameters
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsRozetkaTop != nil {
		toSerialize["is_rozetka_top"] = o.IsRozetkaTop
	}
	if o.LeftKey != nil {
		toSerialize["left_key"] = o.LeftKey
	}
	if o.Level != nil {
		toSerialize["level"] = o.Level
	}
	if o.Mpath != nil {
		toSerialize["mpath"] = o.Mpath
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ParentId != nil {
		toSerialize["parent_id"] = o.ParentId
	}
	if o.RightKey != nil {
		toSerialize["right_key"] = o.RightKey
	}
	if o.RootId != nil {
		toSerialize["root_id"] = o.RootId
	}
	if o.RzMpath != nil {
		toSerialize["rz_mpath"] = o.RzMpath
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Subdomain != nil {
		toSerialize["subdomain"] = o.Subdomain
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.TitlesMode != nil {
		toSerialize["titles_mode"] = o.TitlesMode
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200DataCurrent struct {
	value *InlineResponse200DataCurrent
	isSet bool
}

func (v NullableInlineResponse200DataCurrent) Get() *InlineResponse200DataCurrent {
	return v.value
}

func (v *NullableInlineResponse200DataCurrent) Set(val *InlineResponse200DataCurrent) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200DataCurrent) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200DataCurrent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200DataCurrent(val *InlineResponse200DataCurrent) *NullableInlineResponse200DataCurrent {
	return &NullableInlineResponse200DataCurrent{value: val, isSet: true}
}

func (v NullableInlineResponse200DataCurrent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200DataCurrent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
