/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// InlineResponse200Data struct for InlineResponse200Data
type InlineResponse200Data struct {
	Children       *[]InlineResponse200DataChildren `json:"children,omitempty"`
	Current        *InlineResponse200DataCurrent    `json:"current,omitempty"`
	HasFilter      *bool                            `json:"hasFilter,omitempty"`
	IsNeedStreetId *bool                            `json:"is_need_street_id,omitempty"`
	TileConfig     *InlineResponse200DataTileConfig `json:"tile_config,omitempty"`
}

// NewInlineResponse200Data instantiates a new InlineResponse200Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200Data() *InlineResponse200Data {
	this := InlineResponse200Data{}
	return &this
}

// NewInlineResponse200DataWithDefaults instantiates a new InlineResponse200Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200DataWithDefaults() *InlineResponse200Data {
	this := InlineResponse200Data{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *InlineResponse200Data) GetChildren() []InlineResponse200DataChildren {
	if o == nil || o.Children == nil {
		var ret []InlineResponse200DataChildren
		return ret
	}
	return *o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200Data) GetChildrenOk() (*[]InlineResponse200DataChildren, bool) {
	if o == nil || o.Children == nil {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *InlineResponse200Data) HasChildren() bool {
	if o != nil && o.Children != nil {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []InlineResponse200DataChildren and assigns it to the Children field.
func (o *InlineResponse200Data) SetChildren(v []InlineResponse200DataChildren) {
	o.Children = &v
}

// GetCurrent returns the Current field value if set, zero value otherwise.
func (o *InlineResponse200Data) GetCurrent() InlineResponse200DataCurrent {
	if o == nil || o.Current == nil {
		var ret InlineResponse200DataCurrent
		return ret
	}
	return *o.Current
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200Data) GetCurrentOk() (*InlineResponse200DataCurrent, bool) {
	if o == nil || o.Current == nil {
		return nil, false
	}
	return o.Current, true
}

// HasCurrent returns a boolean if a field has been set.
func (o *InlineResponse200Data) HasCurrent() bool {
	if o != nil && o.Current != nil {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given InlineResponse200DataCurrent and assigns it to the Current field.
func (o *InlineResponse200Data) SetCurrent(v InlineResponse200DataCurrent) {
	o.Current = &v
}

// GetHasFilter returns the HasFilter field value if set, zero value otherwise.
func (o *InlineResponse200Data) GetHasFilter() bool {
	if o == nil || o.HasFilter == nil {
		var ret bool
		return ret
	}
	return *o.HasFilter
}

// GetHasFilterOk returns a tuple with the HasFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200Data) GetHasFilterOk() (*bool, bool) {
	if o == nil || o.HasFilter == nil {
		return nil, false
	}
	return o.HasFilter, true
}

// HasHasFilter returns a boolean if a field has been set.
func (o *InlineResponse200Data) HasHasFilter() bool {
	if o != nil && o.HasFilter != nil {
		return true
	}

	return false
}

// SetHasFilter gets a reference to the given bool and assigns it to the HasFilter field.
func (o *InlineResponse200Data) SetHasFilter(v bool) {
	o.HasFilter = &v
}

// GetIsNeedStreetId returns the IsNeedStreetId field value if set, zero value otherwise.
func (o *InlineResponse200Data) GetIsNeedStreetId() bool {
	if o == nil || o.IsNeedStreetId == nil {
		var ret bool
		return ret
	}
	return *o.IsNeedStreetId
}

// GetIsNeedStreetIdOk returns a tuple with the IsNeedStreetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200Data) GetIsNeedStreetIdOk() (*bool, bool) {
	if o == nil || o.IsNeedStreetId == nil {
		return nil, false
	}
	return o.IsNeedStreetId, true
}

// HasIsNeedStreetId returns a boolean if a field has been set.
func (o *InlineResponse200Data) HasIsNeedStreetId() bool {
	if o != nil && o.IsNeedStreetId != nil {
		return true
	}

	return false
}

// SetIsNeedStreetId gets a reference to the given bool and assigns it to the IsNeedStreetId field.
func (o *InlineResponse200Data) SetIsNeedStreetId(v bool) {
	o.IsNeedStreetId = &v
}

// GetTileConfig returns the TileConfig field value if set, zero value otherwise.
func (o *InlineResponse200Data) GetTileConfig() InlineResponse200DataTileConfig {
	if o == nil || o.TileConfig == nil {
		var ret InlineResponse200DataTileConfig
		return ret
	}
	return *o.TileConfig
}

// GetTileConfigOk returns a tuple with the TileConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200Data) GetTileConfigOk() (*InlineResponse200DataTileConfig, bool) {
	if o == nil || o.TileConfig == nil {
		return nil, false
	}
	return o.TileConfig, true
}

// HasTileConfig returns a boolean if a field has been set.
func (o *InlineResponse200Data) HasTileConfig() bool {
	if o != nil && o.TileConfig != nil {
		return true
	}

	return false
}

// SetTileConfig gets a reference to the given InlineResponse200DataTileConfig and assigns it to the TileConfig field.
func (o *InlineResponse200Data) SetTileConfig(v InlineResponse200DataTileConfig) {
	o.TileConfig = &v
}

func (o InlineResponse200Data) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Children != nil {
		toSerialize["children"] = o.Children
	}
	if o.Current != nil {
		toSerialize["current"] = o.Current
	}
	if o.HasFilter != nil {
		toSerialize["hasFilter"] = o.HasFilter
	}
	if o.IsNeedStreetId != nil {
		toSerialize["is_need_street_id"] = o.IsNeedStreetId
	}
	if o.TileConfig != nil {
		toSerialize["tile_config"] = o.TileConfig
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200Data struct {
	value *InlineResponse200Data
	isSet bool
}

func (v NullableInlineResponse200Data) Get() *InlineResponse200Data {
	return v.value
}

func (v *NullableInlineResponse200Data) Set(val *InlineResponse200Data) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200Data) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200Data(val *InlineResponse200Data) *NullableInlineResponse200Data {
	return &NullableInlineResponse200Data{value: val, isSet: true}
}

func (v NullableInlineResponse200Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
