/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// GetChildrenResponseData struct for GetChildrenResponseData
type GetChildrenResponseData struct {
	Children *[]GetChildrenResponseDataChildren `json:"children,omitempty"`
	Current *GetChildrenResponseDataCurrent `json:"current,omitempty"`
	HasFilter *bool `json:"hasFilter,omitempty"`
	IsNeedStreetId *bool `json:"is_need_street_id,omitempty"`
	TileConfig *GetChildrenResponseDataTileConfig `json:"tile_config,omitempty"`
}

// NewGetChildrenResponseData instantiates a new GetChildrenResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetChildrenResponseData() *GetChildrenResponseData {
	this := GetChildrenResponseData{}
	return &this
}

// NewGetChildrenResponseDataWithDefaults instantiates a new GetChildrenResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetChildrenResponseDataWithDefaults() *GetChildrenResponseData {
	this := GetChildrenResponseData{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *GetChildrenResponseData) GetChildren() []GetChildrenResponseDataChildren {
	if o == nil || o.Children == nil {
		var ret []GetChildrenResponseDataChildren
		return ret
	}
	return *o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetChildrenResponseData) GetChildrenOk() (*[]GetChildrenResponseDataChildren, bool) {
	if o == nil || o.Children == nil {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *GetChildrenResponseData) HasChildren() bool {
	if o != nil && o.Children != nil {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []GetChildrenResponseDataChildren and assigns it to the Children field.
func (o *GetChildrenResponseData) SetChildren(v []GetChildrenResponseDataChildren) {
	o.Children = &v
}

// GetCurrent returns the Current field value if set, zero value otherwise.
func (o *GetChildrenResponseData) GetCurrent() GetChildrenResponseDataCurrent {
	if o == nil || o.Current == nil {
		var ret GetChildrenResponseDataCurrent
		return ret
	}
	return *o.Current
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetChildrenResponseData) GetCurrentOk() (*GetChildrenResponseDataCurrent, bool) {
	if o == nil || o.Current == nil {
		return nil, false
	}
	return o.Current, true
}

// HasCurrent returns a boolean if a field has been set.
func (o *GetChildrenResponseData) HasCurrent() bool {
	if o != nil && o.Current != nil {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given GetChildrenResponseDataCurrent and assigns it to the Current field.
func (o *GetChildrenResponseData) SetCurrent(v GetChildrenResponseDataCurrent) {
	o.Current = &v
}

// GetHasFilter returns the HasFilter field value if set, zero value otherwise.
func (o *GetChildrenResponseData) GetHasFilter() bool {
	if o == nil || o.HasFilter == nil {
		var ret bool
		return ret
	}
	return *o.HasFilter
}

// GetHasFilterOk returns a tuple with the HasFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetChildrenResponseData) GetHasFilterOk() (*bool, bool) {
	if o == nil || o.HasFilter == nil {
		return nil, false
	}
	return o.HasFilter, true
}

// HasHasFilter returns a boolean if a field has been set.
func (o *GetChildrenResponseData) HasHasFilter() bool {
	if o != nil && o.HasFilter != nil {
		return true
	}

	return false
}

// SetHasFilter gets a reference to the given bool and assigns it to the HasFilter field.
func (o *GetChildrenResponseData) SetHasFilter(v bool) {
	o.HasFilter = &v
}

// GetIsNeedStreetId returns the IsNeedStreetId field value if set, zero value otherwise.
func (o *GetChildrenResponseData) GetIsNeedStreetId() bool {
	if o == nil || o.IsNeedStreetId == nil {
		var ret bool
		return ret
	}
	return *o.IsNeedStreetId
}

// GetIsNeedStreetIdOk returns a tuple with the IsNeedStreetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetChildrenResponseData) GetIsNeedStreetIdOk() (*bool, bool) {
	if o == nil || o.IsNeedStreetId == nil {
		return nil, false
	}
	return o.IsNeedStreetId, true
}

// HasIsNeedStreetId returns a boolean if a field has been set.
func (o *GetChildrenResponseData) HasIsNeedStreetId() bool {
	if o != nil && o.IsNeedStreetId != nil {
		return true
	}

	return false
}

// SetIsNeedStreetId gets a reference to the given bool and assigns it to the IsNeedStreetId field.
func (o *GetChildrenResponseData) SetIsNeedStreetId(v bool) {
	o.IsNeedStreetId = &v
}

// GetTileConfig returns the TileConfig field value if set, zero value otherwise.
func (o *GetChildrenResponseData) GetTileConfig() GetChildrenResponseDataTileConfig {
	if o == nil || o.TileConfig == nil {
		var ret GetChildrenResponseDataTileConfig
		return ret
	}
	return *o.TileConfig
}

// GetTileConfigOk returns a tuple with the TileConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetChildrenResponseData) GetTileConfigOk() (*GetChildrenResponseDataTileConfig, bool) {
	if o == nil || o.TileConfig == nil {
		return nil, false
	}
	return o.TileConfig, true
}

// HasTileConfig returns a boolean if a field has been set.
func (o *GetChildrenResponseData) HasTileConfig() bool {
	if o != nil && o.TileConfig != nil {
		return true
	}

	return false
}

// SetTileConfig gets a reference to the given GetChildrenResponseDataTileConfig and assigns it to the TileConfig field.
func (o *GetChildrenResponseData) SetTileConfig(v GetChildrenResponseDataTileConfig) {
	o.TileConfig = &v
}

func (o GetChildrenResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Children != nil {
		toSerialize["children"] = o.Children
	}
	if o.Current != nil {
		toSerialize["current"] = o.Current
	}
	if o.HasFilter != nil {
		toSerialize["hasFilter"] = o.HasFilter
	}
	if o.IsNeedStreetId != nil {
		toSerialize["is_need_street_id"] = o.IsNeedStreetId
	}
	if o.TileConfig != nil {
		toSerialize["tile_config"] = o.TileConfig
	}
	return json.Marshal(toSerialize)
}

type NullableGetChildrenResponseData struct {
	value *GetChildrenResponseData
	isSet bool
}

func (v NullableGetChildrenResponseData) Get() *GetChildrenResponseData {
	return v.value
}

func (v *NullableGetChildrenResponseData) Set(val *GetChildrenResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableGetChildrenResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableGetChildrenResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetChildrenResponseData(val *GetChildrenResponseData) *NullableGetChildrenResponseData {
	return &NullableGetChildrenResponseData{value: val, isSet: true}
}

func (v NullableGetChildrenResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetChildrenResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


